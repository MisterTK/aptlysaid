name: Production Full Deploy
on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
      
      # Step 1: Link to project (required for all operations)
      - name: Link Supabase Project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} \
            --password ${{ secrets.SUPABASE_PROD_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Step 2: Run ALL database migrations (includes schema, cron jobs, vault)
      - name: Run Database Migrations
        run: |
          echo "üîÑ Applying database migrations..."
          supabase db push --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_PROD_DB_PASSWORD }}
      
      # Step 3: Deploy ALL Edge Functions
      - name: Deploy Edge Functions
        run: |
          echo "‚ö° Deploying edge functions..."
          for function in v2-api v2-workflow-orchestrator v2-external-integrator; do
            echo "Deploying $function..."
            supabase functions deploy "$function" \
              --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} \
              --no-verify-jwt
          done
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Step 4: Set Edge Function Secrets (from GitHub Secrets)
      - name: Set Edge Function Secrets
        run: |
          echo "üîê Setting edge function secrets..."
          
          # Set all secrets from GitHub Secrets
          supabase secrets set --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} \
            GOOGLE_OAUTH_CLIENT_ID="${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" \
            GOOGLE_OAUTH_CLIENT_SECRET="${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}" \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY_PROD }}" \
            STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}" \
            STRIPE_PRICE_ID_STARTER="${{ secrets.STRIPE_PRICE_ID_STARTER }}" \
            STRIPE_PRICE_ID_PRO="${{ secrets.STRIPE_PRICE_ID_PRO }}" \
            STRIPE_PRICE_ID_ENTERPRISE="${{ secrets.STRIPE_PRICE_ID_ENTERPRISE }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            VERTEX_AI_PROJECT_ID="${{ secrets.VERTEX_AI_PROJECT_ID }}" \
            VERTEX_AI_CREDENTIALS='${{ secrets.VERTEX_AI_CREDENTIALS }}' \
            SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
            SENDGRID_FROM_EMAIL="${{ secrets.SENDGRID_FROM_EMAIL }}" \
            ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}" \
            SUPABASE_URL="https://${{ secrets.SUPABASE_PROD_PROJECT_ID }}.supabase.co" \
            SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_PROD_SERVICE_ROLE_KEY }}" \
            WORKFLOW_ORCHESTRATOR_URL="https://${{ secrets.SUPABASE_PROD_PROJECT_ID }}.supabase.co/functions/v1/v2-workflow-orchestrator" \
            EXTERNAL_INTEGRATOR_URL="https://${{ secrets.SUPABASE_PROD_PROJECT_ID }}.supabase.co/functions/v1/v2-external-integrator" \
            API_URL="https://${{ secrets.SUPABASE_PROD_PROJECT_ID }}.supabase.co/functions/v1/v2-api"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Step 5: Set Database Configuration (for cron jobs)
      - name: Configure Database Settings
        run: |
          echo "‚öôÔ∏è Configuring database settings..."
          
          # Set database configuration for cron jobs to work
          supabase db query --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} << EOF
          ALTER DATABASE postgres SET "app.settings.supabase_url" = 'https://${{ secrets.SUPABASE_PROD_PROJECT_ID }}.supabase.co';
          ALTER DATABASE postgres SET "app.settings.service_role_key" = '${{ secrets.SUPABASE_PROD_SERVICE_ROLE_KEY }}';
          EOF
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Step 6: Set Vault Secrets (in database)
      - name: Set Vault Secrets
        run: |
          echo "üîí Setting vault secrets in database..."
          
          # Use a single query to set all vault secrets
          supabase db query --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} << 'EOF'
          DO $$
          BEGIN
            -- Google OAuth
            PERFORM vault.set_secret('google_oauth_client_id', '${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}', 'Google OAuth Client ID');
            PERFORM vault.set_secret('google_oauth_client_secret', '${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}', 'Google OAuth Client Secret');
            
            -- Stripe
            PERFORM vault.set_secret('stripe_secret_key', '${{ secrets.STRIPE_SECRET_KEY_PROD }}', 'Stripe Secret Key');
            PERFORM vault.set_secret('stripe_webhook_secret', '${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}', 'Stripe Webhook Secret');
            
            -- AI Services
            PERFORM vault.set_secret('openai_api_key', '${{ secrets.OPENAI_API_KEY }}', 'OpenAI API Key');
            PERFORM vault.set_secret('vertex_ai_credentials', '${{ secrets.VERTEX_AI_CREDENTIALS }}', 'Vertex AI Credentials');
            
            -- Email
            PERFORM vault.set_secret('sendgrid_api_key', '${{ secrets.SENDGRID_API_KEY }}', 'SendGrid API Key');
            
            -- Encryption
            PERFORM vault.set_secret('encryption_key', '${{ secrets.ENCRYPTION_KEY }}', 'Master Encryption Key');
          END$$;
          EOF
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true # Vault might not exist on first run
      
      # Step 7: Create Storage Buckets
      - name: Create Storage Buckets
        run: |
          echo "üì¶ Creating storage buckets..."
          
          supabase db query --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} << 'EOF'
          -- Create storage buckets
          INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
          VALUES 
            ('avatars', 'avatars', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/webp']::text[]),
            ('documents', 'documents', false, 10485760, ARRAY['application/pdf', 'application/msword']::text[])
          ON CONFLICT (id) DO UPDATE SET
            public = EXCLUDED.public,
            file_size_limit = EXCLUDED.file_size_limit,
            allowed_mime_types = EXCLUDED.allowed_mime_types;
          EOF
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true # Might already exist
      
      # Step 8: Run Seed Data (ONLY if specified)
      - name: Run Seed Data
        if: github.event_name == 'workflow_dispatch' # Only on manual trigger
        run: |
          echo "üå± Running seed data (manual trigger only)..."
          if [ -f "./supabase/seed.sql" ]; then
            supabase db seed --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }}
          else
            echo "No seed file found, skipping..."
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true
      
      # Step 9: Verify Deployment
      - name: Verify Deployment
        run: |
          echo "‚úÖ Verifying deployment..."
          
          # Check cron jobs
          echo "Cron Jobs:"
          supabase db query "SELECT jobname, schedule, active FROM cron.job WHERE jobname LIKE 'v2-%'" \
            --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }}
          
          # Check edge functions
          echo -e "\nEdge Functions:"
          supabase functions list --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }}
          
          # Check secrets (just count, don't expose values)
          echo -e "\nSecrets Count:"
          supabase secrets list --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_ID }} | wc -l
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Step 10: Notify deployment status
      - name: Deployment Summary
        if: always()
        run: |
          echo "======================================"
          echo "üìä Deployment Summary for Production Environment"
          echo "======================================"
          echo "Project: ${{ secrets.SUPABASE_PROD_PROJECT_ID }}"
          echo "Branch: main"
          echo "Commit: ${{ github.sha }}"
          echo "======================================"